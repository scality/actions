name: "SSH to runner"
description: 'Open an SSH connection to a runner'

inputs:
  tmate-server-host:
    description: IP of tmate server
    required: true
  tmate-server-port:
    description: Port of tmate server
    required: true
  tmate-server-rsa-fingerprint:
    description: Tmate server rsa key fingerprint
    required: true
  tmate-server-ed25519-fingerprint:
    description: Tmate server ed25510 key fingerprint
    required: true

runs:
  using: "composite"
  steps:
    - name: "SSH to runner: Write tmate config file"
      shell: bash
      run: |
        TMATE_CONF=/tmp/tmate.conf
        echo "TMATE_CONF=$TMATE_CONF" >> $GITHUB_ENV
        echo "set -g tmate-server-host ${{ inputs.tmate-server-host }}" >> ${TMATE_CONF}
        echo "set -g tmate-server-port ${{ inputs.tmate-server-port }}" >> ${TMATE_CONF}
        echo "set -g tmate-server-rsa-fingerprint ${{ inputs.tmate-server-rsa-fingerprint }}" >> ${TMATE_CONF}
        echo "set -g tmate-server-ed25519-fingerprint ${{ inputs.tmate-server-ed25519-fingerprint }}" >> ${TMATE_CONF}
        cat ${TMATE_CONF}
    - name: "SSH to runner: Install tmate"
      shell: bash
      run: ${GITHUB_ACTION_PATH}/install-tmate.sh
    - name: "SSH to runner: Set up scripts"
      shell: bash
      run: |
        # Adding a system path: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-system-path
        # does not work now, maybe our runner version is old and does not support this functionality.
        # echo "${GITHUB_ACTION_PATH}" >> $GITHUB_PATH
        # Workaround, copy script to ${HOME}/.local/bin
        mkdir -p ${HOME}/.local/bin
        cp ${GITHUB_ACTION_PATH}/stop_debugging ${HOME}/.local/bin/
        cp ${GITHUB_ACTION_PATH}/resume ${HOME}/.local/bin/
    - name: "SSH to runner: Start tmate"
      shell: bash
      run: |
        TMATE_SOCK=/tmp/tmate.sock
        echo "TMATE_SOCK=$TMATE_SOCK" >> $GITHUB_ENV
        nohup tmate -f ${{ env.TMATE_CONF }} -S ${TMATE_SOCK} -F > /dev/null &
        echo "$!" > /tmp/tmate.pid
        # We need to wait a bit for tmate to start.
        sleep 5
        tmate -f ${{ env.TMATE_CONF }} -S ${TMATE_SOCK} wait tmate-ready
    - name: "SSH to runner: Pause workflow and print connection instructions"
      shell: bash
      run: |
        TMATE_SSH=$(tmate -f ${{ env.TMATE_CONF }} -S ${{ env.TMATE_SOCK }} display -p '#{tmate_ssh}')
        MESSAGE=$(cat << EOF

        --------------------------------------------------
        You can connect to this runner using:
        ${TMATE_SSH}
        To connect you need:
        - To  connected to the Scality VPN.
        - The ssh key associated with your GitHub account.
        The workflow has been paused.
        To resume the workflow, run the "resume" command.
        To finish debugging session, run the "stop_debugging" command.
        To disconnect, use Ctrl-D then the following 3 keys sequence '<Enter>~.'
        To reconnect, ssh then Ctrl-C
        --------------------------------------------------
        EOF
        )
        RESUME_FILE=${GITHUB_WORKSPACE}/resume
        while [[ -S ${{ env.TMATE_SOCK }} ]]; do
          echo "::notice title=SSH::${MESSAGE}"
          sleep 5

          if [[ -e ${RESUME_FILE} ]]; then
              echo -e "Resume file created, resuming workflow."
              exit 0
          fi
        done
